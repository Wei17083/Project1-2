package Solvers;

import titan.Body;
import titan.State;
import titan.Vector;
import titan.Vector3dInterface;

import java.awt.*;
import java.util.ArrayList;

public class RungeExp {

    RungeKuttaSolver aid = new RungeKuttaSolver();
    
    public static void main(String[] args) {

        RungeExp answer = new RungeExp();
        int[] stepSizes = new int[] {1500,1000,500,100,60,40}; 
        ArrayList<ArrayList<State>> generalList = new ArrayList<>();

        for (int i=0; i<stepSizes.length; i++) {
                ArrayList<State> list = answer.RungeExpAnswer(stepSizes[i]);
                generalList.add(list);
        }

        returnAnswers(generalList, stepSizes.length, stepSizes);
        
    }

    private static void returnAnswers (ArrayList<ArrayList<State>> answer, int size, int[] h) {
        for (int i=0; i<size; i++) {
                System.out.println("StepSize "+h[i]);
                for (int j=0; j<answer.get(i).size(); j++) {
                System.out.println(answer.get(i).get(j).getPositionList().get(3)); // only checking earth position, because otherwise 
                                                                                   // experimenting would take time
                }
        }

    }
    private ArrayList<State> RungeExpAnswer(double h){
        Body[] bodies = getBodies();
        State currentState = getFirstState();

        ArrayList<State> results = new ArrayList<State>(); // saves the result after every step, used for the algorithm
        results.add(currentState);
        int a=0;

        ArrayList<State> exp = new ArrayList<State>(); // saves the result after every interval you want
        double interval = 31536000.0/12.0; // at the moment saves after every month
        exp.add(currentState);
        int b=1;

        for (double i=0; i<31536000; i=i+h) { // runs until 1 year
            State newState = aid.stateStep(results.get(a), bodies, h);
            results.add(newState);
            a++;

            if(interval==i/b) {
                exp.add(newState);
                b++;
            }
        } 
        return exp; // returns the interval results
    } 

    private static State getFirstState(){
        
        Body[] bodies = getBodies();
        
        ArrayList<Vector3dInterface> positions = new ArrayList<>();
        ArrayList<Vector3dInterface> velocities = new ArrayList<>();

        for(Body b : bodies) {
            positions.add(b.getPosition());
            velocities.add(b.getVelocity());
        }

        return new State(0, positions, velocities);
    }

    private static Body[] getBodies(){
        Body sun = new Body("Sun", 0, 1.988500e30,
                                new Vector(-6.806783239281648e+08, 1.080005533878725e+09, 6.564012751690170e+06),
                                new Vector(-1.420511669610689e+01, -4.954714716629277e+00, 3.994237625449041e-01),
                                6.95508e8, new Color(249, 249, 127)); // yellow+white

                Body mercury = new Body("Mercury", 1, 3.302e23,
                                new Vector(6.047855986424127e+06, -6.801800047868888e+10, -5.702742359714534e+09),
                                new Vector(3.892585189044652e+04, 2.978342247012996e+03, -3.327964151414740e+03),
                                2.4397e6, new Color(145, 162, 171)); // grey

                Body venus = new Body("Venus", 2, 4.8685e24,
                                new Vector(-9.435345478592035e+10, 5.350359551033670e+10, 6.131453014410347e+09),
                                new Vector(-1.726404287724406e+04, -3.073432518238123e+04, 5.741783385280979e-04),
                                6.0518e6, new Color(181, 92, 69)); // red+brown+grey

                Body earth = new Body("Earth", 3, 5.97219e24,
                                new Vector(-1.471922101663588e+11, -2.860995816266412e+10, 8.278183193596080e+06),
                                new Vector(5.427193405797901e+03, -2.931056622265021e+04, 6.575428158157592e-01),
                                6.371e6, new Color(114, 213, 190)); // green+blue+grey

                Body moon = new Body("Moon", 4, 7.349e22,
                                new Vector(-1.472343904597218e+11, -2.822578361503422e+10, 1.052790970065631e+07),
                                new Vector(4.433121605215677e+03, -2.948453614110320e+04, 8.896598225322805e+01),
                                1.7375e6, Color.gray);

                Body mars = new Body("Mars", 5, 6.4171e23,
                                new Vector(-3.615638921529161e+10, -2.167633037046744e+11, -3.687670305939779e+09),
                                new Vector(2.481551975121696e+04, -1.816368005464070e+03, -6.467321619018108e+02),
                                3.3895e6, new Color(171, 62, 41)); // red+brown+dark

                Body jupiter = new Body("Jupiter", 6, 1.89813e27,
                                new Vector(1.781303138592153e+11, -7.551118436250277e+11, -8.532838524802327e+08),
                                new Vector(1.255852555185220e+04, 3.622680192790968e+03, -2.958620380112444e+02),
                                6.9911e7, new Color(215, 148, 61)); // orange+brown

                Body saturn = new Body("Saturn", 7, 5.6834e26,
                                new Vector(6.328646641500651e+11, -1.358172804527507e+12, -1.578520137930810e+09),
                                new Vector(8.220842186554890e+03, 4.052137378979608e+03, -3.976224719266916e+02),
                                5.8232e7, new Color(208, 180, 40)); // gold+brown

                Body titan = new Body("Titan", 8, 1.34553e23,
                                new Vector(6.332873118527889e+11, -1.357175556995868e+12, -2.134637041453660e+09),
                                new Vector(3.056877965721629e+03, 6.125612956428791e+03, -9.523587380845593e+02),
                                2.5755e6, new Color(163, 191, 89)); // yellow+green

                Body uranus = new Body("Uranus", 9, 8.6813e25,
                                new Vector(2.395195786685187e+12, 1.744450959214586e+12, -2.455116324031639e+10),
                                new Vector(-4.059468635313243e+03, 5.187467354884825e+03, 7.182516236837899e+01),
                                2.5362e7, new Color(121, 227, 235)); // blue+green

                Body neptune = new Body("Neptune", 10, 1.02413e26,
                                new Vector(4.382692942729203e+12, -9.093501655486243e+11, -8.227728929479486e+10),
                                new Vector(1.068410720964204e+03, 5.354959501569486e+03, -1.343918199987533e+02),
                                2.4622e7, Color.blue);
                Body probe = new Body("Probe", 11, 15000, new Vector(0, 0, 0), new Vector(0, 0, 0), 100, null);

                // create arrays of bodies and corresponding forces
                Body[] bodies = new Body[] { sun, mercury, venus, earth, moon, mars, jupiter, saturn, titan, uranus,
                                neptune, probe };

            return bodies;

/* results:

        stepSize 1500;
        
        ( -1.471922101663588E11, -2.860995816266412E10, 8278183.19359608)
        ( -1.1408439269409846E11, -9.829933456486401E10, 1.2172731517783603E7)
        ( -5.125859344745346E10, -1.4199136992858588E11, 1.4995409137092095E7)
        ( 2.4593759918460144E10, -1.4892373832757178E11, 1.6299699031884765E7)
        ( 9.39734339208611E10, -1.1759267339057729E11, 1.5946566314594673E7)
        ( 1.390194843201821E11, -5.58774202639218E10, 1.4217484095883127E7)
        ( 1.4760126492117593E11, 2.058522061419681E10, 1.1752524112222828E7)
        ( 1.1660606280554068E11, 9.172939586744032E10, 9452494.196618404)
        ( 5.355112725932242E10, 1.3800362551589978E11, 8253980.5335391015)
        ( -2.4633956785014523E10, 1.4608209094677917E11, 8841046.533149544)
        ( -9.617437913669084E10, 1.1339447302537091E11, 1.1405681966483176E7)
        ( -1.411669726727707E11, 4.924332952793602E10, 1.5551664408164866E7)

        stepsize 1000;

        ( -1.471922101663588E11, -2.860995816266412E10, 8278183.19359608)
        ( -1.1409396338397963E11, -9.828807920030054E10, 1.217238882718331E7)
        ( -5.127238765314448E10, -1.4198635778765558E11, 1.4994951049068296E7)
        ( 2.4579328396312504E10, -1.4892616867816406E11, 1.6299210090617783E7)
        ( 9.396205410997505E10, -1.1760191267780066E11, 1.5946271426065337E7)
        ( 1.3901412740995178E11, -5.589115386925897E10, 1.4217570320157535E7)
        ( 1.476034642553844E11, 2.0570520201426598E10, 1.1752993293790644E7)
        ( 1.1661541267169089E11, 9.171767299769606E10, 9453158.098844368)
        ( 5.356521054433431E10, 1.379981836574051E11, 8254538.681858278)
        ( -2.4619012818826088E10, 1.460845429872455E11, 8841186.429578457)
        ( -9.616276004682855E10, 1.1340414563122395E11, 1.1405189893247388E7)
        ( -1.4116185942224847E11, 4.9257462561445335E10, 1.5550553204391064E7)
                
        stepSize 500;

        ( -1.471922101663588E11, -2.860995816266412E10, 8278183.19359608)
        ( -1.1410353298234454E11, -9.82768228677572E10, 1.2172046680914842E7)
        ( -5.128618138768089E10, -1.4198134428772113E11, 1.499449372944871E7)
        ( 2.456489662897407E10, -1.4892859762129022E11, 1.6298721622538965E7)
        ( 9.395067340101366E10, -1.1761115084939594E11, 1.5945976438073669E7)
        ( 1.3900876915728238E11, -5.590488693232588E10, 1.4217656009984912E7)
        ( 1.476056621310341E11, 2.0555819594043755E10, 1.175346182548228E7)
        ( 1.1662476135371548E11, 9.170594921214403E10, 9453821.53115411)
        ( 5.357929326885017E10, 1.379927403892428E11, 8255096.749816814)
        ( -2.4604068608450146E10, 1.4608699352189023E11, 8841326.726942247)
        ( -9.615113997761938E10, 1.1341381707495222E11, 1.1404698591112815E7)
        ( -1.4115674475351352E11, 4.9271595100152824E10, 1.5549442744987633E7)

        stepSize 100;

        ( -1.471922101663588E11, -2.860995816266412E10, 8278183.19359608)
        ( -1.1411118787506422E11, -9.82678171048404E10, 1.2171773355323277E7)
        ( -5.129721603597869E10, -1.4197733250930603E11, 1.4994128426989056E7)
        ( 2.4553351038666885E10, -1.489305397623676E11, 1.6298331189051792E7)
        ( 9.394156818730971E10, -1.1761854058331303E11, 1.594574037625324E7)
        ( 1.3900448158861725E11, -5.591587299217456E10, 1.4217724176942386E7)
        ( 1.4760741938132147E11, 2.0544058968221153E10, 1.1753836182842957E7)
        ( 1.1663223944657114E11, 9.169656952450505E10, 9454351.93890578)
        ( 5.35905590446081E10, 1.379883847598365E11, 8255543.146968094)
        ( -2.4592113064663174E10, 1.46088952865342E11, 8841439.254332853)
        ( -9.614184321738257E10, 1.134215533929764E11, 1.1404306104940584E7)
        ( -1.4115265199753317E11, 4.928290077454638E10, 1.5548554912631586E7)

        stepSize 60;

        ( -1.471922101663588E11, -2.860995816266412E10, 8278183.19359608)
        ( -1.1411195332590988E11, -9.826691649448099E10, 1.2171746041943664E7)
        ( -5.129831948421079E10, -1.4197693128363068E11, 1.4994091923749723E7)
        ( 2.4552196471022335E10, -1.4893073392692996E11, 1.6298292162082275E7)
        ( 9.394065763434555E10, -1.17619279517424E11, 1.5945716766160827E7)
        ( 1.3900405278451263E11, -5.591697157905476E10, 1.4217730974552067E7)
        ( 1.4760759505501627E11, 2.0542882898807655E10, 1.1753873595672503E7)
        ( 1.1663298721418608E11, 9.1695631523525E10, 9454404.963472327)
        ( 5.359168560247534E10, 1.3798794914729486E11, 8255587.784597262)
        ( -2.459091750165786E10, 1.4608914874671783E11, 8841450.522034494)
        ( -9.614091350685226E10, 1.1342232698393251E11, 1.1404266883855691E7)
        ( -1.4115224267198898E11, 4.928403132465489E10, 1.55484661550346E7)

        stepSize 40;

        ( -1.471922101663588E11, -2.860995816266412E10, 8278183.19359608)
        ( -1.1411233604871358E11, -9.826646618697925E10, 1.2171732386422964E7)
        ( -5.129887120721127E10, -1.4197673066753348E11, 1.4994073674072057E7)
        ( 2.4551619186589916E10, -1.4893083100585062E11, 1.6298272650562359E7)
        ( 9.394020235568343E10, -1.1761964898184882E11, 1.5945704962450588E7)
        ( 1.3900383837923212E11, -5.591752087128756E10, 1.4217734373445654E7)
        ( 1.476076828884249E11, 2.0542294863510628E10, 1.1753892300587915E7)
        ( 1.1663336109528732E11, 9.169516252071915E10, 9454431.472642068)
        ( 5.359224888027529E10, 1.3798773133759705E11, 8255610.099179981)
        ( -2.4590319719328632E10, 1.4608924668385907E11, 8841456.152372822)
        ( -9.61404486490541E10, 1.1342271377682704E11, 1.1404247273202732E7)
        ( -1.411520380057654E11, 4.9284596598808975E10, 1.5548421781102475E7)

*/

}
}




